package primitive

import (
	"crypto/md5"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"image"
	"image/color"
	"strings"
)

// Test jpgImageTestData2 has the same dimensions as Test jpgImageTestData
const jpgImageTestData2 = `
/9j/4AAQSkZJRgABAQEASABIAAD/4RdIRXhpZgAASUkqAAgAAAAHABIBAwABAAAAAQAAABoBBQABAAAA
YgAAABsBBQABAAAAagAAACgBAwABAAAAAgAAADEBAgANAAAAcgAAADIBAgAUAAAAgAAAAGmHBAABAAAA
lAAAAKYAAABIAAAAAQAAAEgAAAABAAAAR0lNUCAyLjEwLjMyAAAyMDIzOjA0OjIyIDE0OjM3OjAxAAEA
AaADAAEAAAABAAAAAAAAAAkA/gAEAAEAAAABAAAAAAEEAAEAAAAAAQAAAQEEAAEAAACvAAAAAgEDAAMA
AAAYAQAAAwEDAAEAAAAGAAAABgEDAAEAAAAGAAAAFQEDAAEAAAADAAAAAQIEAAEAAAAeAQAAAgIEAAEA
AAAhFgAAAAAAAAgACAAIAP/Y/+AAEEpGSUYAAQEAAAEAAQAA/9sAQwAIBgYHBgUIBwcHCQkICgwUDQwL
CwwZEhMPFB0aHx4dGhwcICQuJyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sAQwEJCQkMCwwYDQ0Y
MiEcITIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy/8AAEQgA
rwEAAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMF
BQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2
Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeo
qaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEB
AQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXET
IjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2Rl
ZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT
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
OYj/AGWPFYN9eF49k6KBnrV6TR5pSS05yaVdDDQeXI+RnNWmkFmcsXXcR1FJhG7Ctu98PpAm5JW3ehHF
ZD2jqSMjitVJPYhpoiECOcbtvvWhZ6SzPviuo8j0J/wrPZGXrQsjqflYim7sDpGkvbOMbwJVH8Q7VZgv
o54x82xx3rnodWuYhgtuX0IFWUv45OdhUnrisnA0UjrdL8VSWMn2a+UunZ1HP6n6100HiCxujsiuFOOv
PSvLLljJFlDhh0zWJHdyRynaxV89q2hBTXmcdVypvuj3vcGAIOQaK868N+MHiKWt0pfsrCu/ttQimA+Q
5NRKDi9QjNSWgTnCZrNY7mJrVu5IioXacmqywo3Rf1rN7m8diiVDDBGa5vWtKEZNxCvyH7w9K7dbSP8A
iH60r2duUIaMEY5GTVRumTJpqx5BejyYWlHYdK5i6ujOCCMHNdh4thS2vjFFxHnJH5VyVxbgguv411QS
tc5KlRt2KNPjOJF+opNuTgVPDbnepY96psiMW3oakf3B9KkqOPjipkTd9K52ekthu0twKnitwnLcmnBQ
o4qQcigTLFreT2cm+CQofaulsvEEdyNt1Crnvxz/ADrk6VWKnIODUtXJcU9zuv7L0LUh81vGCf7qjNSX
HgXw/dWvllJkOOHTaD/KuY025aWZVzhgc100F/LFxu4rOUpRe4o0IyvY5jUvhhGPm06+yP7sxyf0UVy9
74evNNkEU6bT2J717JFKJkDjPNTXVlDdoFkUHBzmtFiJLcweGj0P/9kA/+EM0Wh0dHA6Ly9ucy5hZG9i
ZS5jb20veGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRj
emtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENv
cmUgNC40LjAtRXhpdjIiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkv
MDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp
4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly
9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6R0lNUD0iaHR0c
DovL3d3dy5naW1wLm9yZy94bXAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRz
LzEuMS8iIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1wTU06RG9jdW1
lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOmEwMDAzZjViLWY5MjItNDZkMi1iNDRmLTBlNDgyYzA1ZTE1Yy
IgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpjZjgyYjQwZi0wNjdiLTRlYmQtOTQ4ZC0wOWIyOTQ4N
mUwODAiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDphZDYzYTBhYy1iOTRmLTQ3NDgt
YTE4Zi0zNjg0ZTc5ZmQxODciIEdJTVA6QVBJPSIyLjAiIEdJTVA6UGxhdGZvcm09Ik1hYyBPUyIgR0l
NUDpUaW1lU3RhbXA9IjE2ODIxOTU4MjM1NDI1MTUiIEdJTVA6VmVyc2lvbj0iMi4xMC4zMiIgZGM6Rm
9ybWF0PSJpbWFnZS9qcGVnIiB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCIgeG1wOk1ldGFkYXRhR
GF0ZT0iMjAyMzowNDoyMlQxNDozNzowMS0wNjowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjM6MDQ6MjJU
MTQ6Mzc6MDEtMDY6MDAiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN
0aW9uPSJzYXZlZCIgc3RFdnQ6Y2hhbmdlZD0iLyIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDoxMj
c0ZWExNC04OTliLTRkMmUtOGUzYy00MDljZjU1M2VjMDkiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9Ikdpb
XAgMi4xMCAoTWFjIE9TKSIgc3RFdnQ6d2hlbj0iMjAyMy0wNC0yMlQxNDozNzowMy0wNjowMCIvPiA8
L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC9
4OnhtcG1ldGE+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA
gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD94cGFja2V0IGVuZD0i
dyI/Pv/iArBJQ0NfUFJPRklMRQABAQAAAqBsY21zBDAAAG1udHJSR0IgWFlaIAfnAAQAFgAUACMAC2F
jc3BBUFBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD21gABAAAAANMtbGNtcwAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADWRlc2MAAAEgAAAAQGNwcnQAAAFgAAAAN
nd0cHQAAAGYAAAAFGNoYWQAAAGsAAAALHJYWVoAAAHYAAAAFGJYWVoAAAHsAAAAFGdYWVoAAAIAAAAA
FHJUUkMAAAIUAAAAIGdUUkMAAAIUAAAAIGJUUkMAAAIUAAAAIGNocm0AAAI0AAAAJGRtbmQAAAJYAAA
AJGRtZGQAAAJ8AAAAJG1sdWMAAAAAAAAAAQAAAAxlblVTAAAAJAAAABwARwBJAE0AUAAgAGIAdQBpAG
wAdAAtAGkAbgAgAHMAUgBHAEJtbHVjAAAAAAAAAAEAAAAMZW5VUwAAABoAAAAcAFAAdQBiAGwAaQBjA
CAARABvAG0AYQBpAG4AAFhZWiAAAAAAAAD21gABAAAAANMtc2YzMgAAAAAAAQxCAAAF3v//8yUAAAeT
AAD9kP//+6H///2iAAAD3AAAwG5YWVogAAAAAAAAb6AAADj1AAADkFhZWiAAAAAAAAAknwAAD4QAALb
EWFlaIAAAAAAAAGKXAAC3hwAAGNlwYXJhAAAAAAADAAAAAmZmAADypwAADVkAABPQAAAKW2Nocm0AAA
AAAAMAAAAAo9cAAFR8AABMzQAAmZoAACZnAAAPXG1sdWMAAAAAAAAAAQAAAAxlblVTAAAACAAAABwAR
wBJAE0AUG1sdWMAAAAAAAAAAQAAAAxlblVTAAAACAAAABwAcwBSAEcAQv/bAEMAAwICAwICAwMDAwQD
AwQFCAUFBAQFCgcHBggMCgwMCwoLCw0OEhANDhEOCwsQFhARExQVFRUMDxcYFhQYEhQVFP/bAEMBAwQ
EBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFB
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
`

const jpgImageTestData = `
/9j/4AAQSkZJRgABAQIAHAAcAAD/2wBDABALDA4MChAODQ4SERATGCgaGBYWGDEjJR0oOjM9PDkzODdA
SFxOQERXRTc4UG1RV19iZ2hnPk1xeXBkeFxlZ2P/2wBDARESEhgVGC8aGi9jQjhCY2NjY2NjY2NjY2Nj
Y2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2P/wAARCABnAJYDASIAAhEBAxEB/8QA
HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDlwKMD0pwzSiuK57QzGDxS7D6in8Y5ximnAPUfSlcq4m3ilUYp
2OKXHvRcVxnTtS7c07HNFK4DQPakC4PNOA+tOx70XAjK/So5gBGP94fzqfvUVx/qxx/EP51UXqRP4WSE
cmgjilP3jSEZqS0IO/NGDnpUiocDg/McDjvV6HTPOdVWYgsM5KcfzzQ2JySM2jp6VYu7SWzmMUwG4cgj
kMPUVBjjtTGtRu0Zopw+lFFxhinrGzuqqMsxAA9yaXFSRv5cqSEcIwYj6GpuZ30O30fSLKzhUpbpNMv3
5XGTn29BV28jt7pPLuIVljPBBFVreYx+VbqAjycgt3x14zRcNOxGyVFHQkIc/wA61exyKLbuzjdZ046d
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
`

// Get a string which represents a hash of an arbitrary object
func Hash(i interface{}) string {
	json_encoded, _ := json.Marshal(i)
	md5_hashed := md5.Sum(json_encoded)
	return fmt.Sprintf("%x", md5_hashed)
}

func getStaticScanLines() []Scanline {
	scanlines := []Scanline{{Y: 0, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 1, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 2, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 3, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 4, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 5, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 6, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 7, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 8, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 9, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 10, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 11, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 12, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 13, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 14, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 15, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 16, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 17, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 18, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 19, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 20, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 21, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 22, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 23, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 24, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 25, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 26, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 27, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 28, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 29, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 30, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 31, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 32, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 33, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 34, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 35, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 36, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 37, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 38, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 39, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 40, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 41, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 42, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 43, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 44, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 45, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 46, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 47, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 48, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 49, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 50, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 51, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 52, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 53, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 54, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 55, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 56, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 57, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 58, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 59, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 60, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 61, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 62, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 63, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 64, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 65, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 66, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 67, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 68, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 69, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 70, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 71, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 72, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 73, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 74, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 75, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 76, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 77, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 78, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 79, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 80, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 81, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 82, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 83, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 84, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 85, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 86, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 87, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 88, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 89, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 90, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 91, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 92, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 93, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 94, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 95, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 96, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 97, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 98, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 99, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 100, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 101, X1: 0, X2: 147, Alpha: 0xffff},
		{Y: 102, X1: 0, X2: 147, Alpha: 0xffff}}
	return scanlines
}

// {{Y:0 X1:1 X2:149 Alpha:65535} {Y:1 X1:1 X2:149 Alpha:65535} {Y:2 X1:1 X2:149 Alpha:65535} {Y:3 X1:1 X2:149 Alpha:65535} {Y:4 X1:1 X2:149 Alpha:65535} {Y:5 X1:1 X2:149 Alpha:65535} {Y:6 X1:1 X2:149 Alpha:65535} {Y:7 X1:1 X2:149 Alpha:65535} {Y:8 X1:1 X2:149 Alpha:65535} {Y:9 X1:1 X2:149 Alpha:65535} {Y:10 X1:1 X2:149 Alpha:65535} {Y:11 X1:1 X2:149 Alpha:65535} {Y:12 X1:1 X2:149 Alpha:65535} {Y:13 X1:1 X2:149 Alpha:65535} {Y:14 X1:1 X2:149 Alpha:65535} {Y:15 X1:1 X2:149 Alpha:65535} {Y:16 X1:0 X2:149 Alpha:65535} {Y:17 X1:0 X2:149 Alpha:65535} {Y:18 X1:0 X2:149 Alpha:65535} {Y:19 X1:0 X2:149 Alpha:65535} {Y:20 X1:0 X2:149 Alpha:65535} {Y:21 X1:0 X2:149 Alpha:65535} {Y:22 X1:0 X2:148 Alpha:65535} {Y:23 X1:0 X2:148 Alpha:65535} {Y:24 X1:0 X2:148 Alpha:65535} {Y:25 X1:0 X2:148 Alpha:65535} {Y:26 X1:0 X2:148 Alpha:65535} {Y:27 X1:0 X2:148 Alpha:65535} {Y:28 X1:0 X2:148 Alpha:65535} {Y:29 X1:0 X2:148 Alpha:65535} {Y:30 X1:0 X2:148 Alpha:65535} {Y:31 X1:0 X2:148 Alpha:65535} {Y:32 X1:0 X2:148 Alpha:65535} {Y:33 X1:0 X2:148 Alpha:65535} {Y:34 X1:0 X2:148 Alpha:65535} {Y:35 X1:0 X2:148 Alpha:65535} {Y:36 X1:0 X2:148 Alpha:65535} {Y:37 X1:0 X2:148 Alpha:65535} {Y:38 X1:0 X2:148 Alpha:65535} {Y:39 X1:0 X2:148 Alpha:65535} {Y:40 X1:0 X2:148 Alpha:65535} {Y:41 X1:0 X2:148 Alpha:65535} {Y:42 X1:0 X2:148 Alpha:65535} {Y:43 X1:0 X2:148 Alpha:65535} {Y:44 X1:0 X2:148 Alpha:65535} {Y:45 X1:0 X2:148 Alpha:65535} {Y:46 X1:0 X2:148 Alpha:65535} {Y:47 X1:0 X2:147 Alpha:65535} {Y:48 X1:0 X2:147 Alpha:65535} {Y:49 X1:0 X2:147 Alpha:65535} {Y:50 X1:0 X2:147 Alpha:65535} {Y:51 X1:0 X2:147 Alpha:65535} {Y:52 X1:0 X2:147 Alpha:65535} {Y:53 X1:0 X2:147 Alpha:65535} {Y:54 X1:0 X2:147 Alpha:65535} {Y:55 X1:0 X2:147 Alpha:65535} {Y:56 X1:0 X2:147 Alpha:65535} {Y:57 X1:0 X2:147 Alpha:65535} {Y:58 X1:0 X2:147 Alpha:65535} {Y:59 X1:0 X2:147 Alpha:65535} {Y:60 X1:0 X2:147 Alpha:65535} {Y:61 X1:0 X2:147 Alpha:65535} {Y:62 X1:0 X2:147 Alpha:65535} {Y:63 X1:0 X2:147 Alpha:65535} {Y:64 X1:0 X2:147 Alpha:65535} {Y:65 X1:0 X2:147 Alpha:65535} {Y:66 X1:0 X2:147 Alpha:65535} {Y:67 X1:0 X2:147 Alpha:65535} {Y:68 X1:0 X2:147 Alpha:65535} {Y:69 X1:0 X2:147 Alpha:65535} {Y:70 X1:0 X2:147 Alpha:65535} {Y:71 X1:0 X2:147 Alpha:65535} {Y:72 X1:0 X2:146 Alpha:65535} {Y:73 X1:0 X2:146 Alpha:65535} {Y:74 X1:0 X2:146 Alpha:65535} {Y:75 X1:0 X2:146 Alpha:65535} {Y:76 X1:0 X2:146 Alpha:65535} {Y:77 X1:0 X2:146 Alpha:65535} {Y:78 X1:0 X2:146 Alpha:65535} {Y:79 X1:0 X2:146 Alpha:65535} {Y:80 X1:0 X2:146 Alpha:65535} {Y:81 X1:0 X2:146 Alpha:65535} {Y:82 X1:0 X2:146 Alpha:65535} {Y:83 X1:0 X2:146 Alpha:65535} {Y:84 X1:0 X2:146 Alpha:65535} {Y:85 X1:0 X2:146 Alpha:65535} {Y:86 X1:0 X2:146 Alpha:65535} {Y:87 X1:0 X2:146 Alpha:65535} {Y:88 X1:0 X2:146 Alpha:65535} {Y:89 X1:0 X2:146 Alpha:65535} {Y:90 X1:0 X2:146 Alpha:65535} {Y:91 X1:0 X2:146 Alpha:65535} {Y:92 X1:0 X2:146 Alpha:65535} {Y:93 X1:27 X2:146 Alpha:65535} {Y:94 X1:57 X2:146 Alpha:65535} {Y:95 X1:86 X2:146 Alpha:65535} {Y:96 X1:116 X2:146 Alpha:65535} {Y:97 X1:146 X2:146 Alpha:65535}}

func createTestImage() image.Image {
	reader := base64.NewDecoder(base64.StdEncoding, strings.NewReader(jpgImageTestData))
	sampleImage, _, _ := image.Decode(reader)
	return sampleImage
}

func createTestImage2() image.Image {
	reader := base64.NewDecoder(base64.StdEncoding, strings.NewReader(jpgImageTestData2))
	sampleImage, _, _ := image.Decode(reader)
	return sampleImage
}

// These are the averages for our test image
func testImageAverageRed() int   { return 143 }
func testImageAverageGreen() int { return 94 }
func testImageAverageBlue() int  { return 70 }

func createTestModel() *Model {

	testingImage := createTestImage()

	// generate a small number of workers
	num_workers := 4

	//Generate a background color
	r := 123
	g := 234
	b := 255

	nrgba_color := color.NRGBA{uint8(r), uint8(g), uint8(b), 255}
	background_color := MakeColor(nrgba_color)

	// run the function under test with generated values
	return NewModel(testingImage, background_color,
		testingImage.Bounds().Max.X*testingImage.Bounds().Max.Y, num_workers)
}

// Notifier for unit testing
type Notifier interface {
	Notify(message string)
}

type NullNotify struct {
}

func (n *NullNotify) Notify(message string) {
	//do nothing
}

func NewTestStringNotifier() *testStringNotifier {

	notifier := new(testStringNotifier)
	notifier.messages = make(map[string]int)

	return notifier
}

type testStringNotifier struct {
	messages map[string]int
}

func (tsn *testStringNotifier) Notify(message string) {
	tsn.messages[message] += 1
}
